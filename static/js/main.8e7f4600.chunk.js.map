{"version":3,"sources":["components/days.js","components/current.js","components/weather.js","App.js","index.js"],"names":["Days","Data","this","props","className","map","el","i","dateMo","Date","dt","toLocaleDateString","date","weekDay","Array","day","getDay","href","src","weather","icon","alt","Math","round","temp","max","min","id","morn","eve","night","feels_like","clouds","humidity","wind_speed","Component","Current","location","time","Cloudiness","Humidity","Wind","API_KEY","Weather","state","cor","data","getWeather","a","fetch","latitude","longitude","api_city","json","datas","ok","setState","name","api_url","current","setTime","getHours","getMinutes","daily","window","navigator","geolocation","getCurrentPosition","area","coords","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAIqBA,E,4JAEjB,WACI,IAAQC,EAASC,KAAKC,MAAdF,KACR,OACI,qBAAKG,UAAU,eAAf,SAEA,eAAC,IAAD,WACI,cAAC,IAAD,UACMH,GAAQA,EAAKI,KAAK,SAACC,EAAIC,GACrB,IAAMC,EAAS,IAAIC,KAAa,IAARH,EAAGI,IAAWC,qBAChCC,EAAO,IAAIH,KAAa,IAARH,EAAGI,IACnBG,EAAU,IAAIC,MAAM,GACtBD,EAAQ,GAAK,SACbA,EAAQ,GAAK,SACbA,EAAQ,GAAK,UACbA,EAAQ,GAAK,YACbA,EAAQ,GAAK,WACbA,EAAQ,GAAK,SACbA,EAAQ,GAAK,WACjB,IAAME,EAAMF,EAAQD,EAAKI,UACzB,OACI,cAAC,IAAD,UACI,oBAAGC,KAAK,SAAR,UACI,6BAAKF,IACL,4BAAIP,IACJ,qBAAKU,IAAG,2CAAsCZ,EAAGa,QAAQ,GAAGC,KAApD,WAAmEC,IAAI,KAC/E,qCAAO,iCAAOC,KAAKC,MAAMjB,EAAGkB,KAAKC,KAA1B,eACP,qCAAO,iCAAOH,KAAKC,MAAMjB,EAAGkB,KAAKE,KAA1B,mBANLnB,QAapBN,GAAQA,EAAKI,KAAK,SAACC,EAAIC,GACrB,IAAMC,EAAS,IAAIC,KAAa,IAARH,EAAGI,IAAWC,qBAChCC,EAAO,IAAIH,KAAa,IAARH,EAAGI,IACnBG,EAAU,IAAIC,MAAM,GACtBD,EAAQ,GAAK,SACbA,EAAQ,GAAK,SACbA,EAAQ,GAAK,UACbA,EAAQ,GAAK,YACbA,EAAQ,GAAK,WACbA,EAAQ,GAAK,SACbA,EAAQ,GAAK,WACjB,IAAME,EAAMF,EAAQD,EAAKI,UACzB,OACI,cAAC,IAAD,UACI,eAAC,IAAD,CAAKW,GAAG,QAAR,UACI,gCACI,mCAAMZ,KACN,4BAAIP,IACJ,qBAAKU,IAAG,2CAAsCZ,EAAGa,QAAQ,GAAGC,KAApD,WAAmEC,IAAI,QAEnF,gCACI,kCACA,+BACI,uBACA,yCACA,yCACA,0CAEJ,+BACI,wCAEA,+BAAI,qCAAQC,KAAKC,MAAMjB,EAAGkB,KAAKI,MAA3B,YAAJ,SACA,6BAAI,qCAAQN,KAAKC,MAAMjB,EAAGkB,KAAKK,KAA3B,cACJ,6BAAI,qCAAQP,KAAKC,MAAMjB,EAAGkB,KAAKM,OAA3B,iBAER,+BACI,6CACA,6BAAI,iCAAOR,KAAKC,MAAMjB,EAAGyB,WAAWH,MAAhC,cACJ,6BAAI,iCAAON,KAAKC,MAAMjB,EAAGyB,WAAWF,KAAhC,cACJ,6BAAI,iCAAOP,KAAKC,MAAMjB,EAAGyB,WAAWD,OAAhC,sBAKZ,2CAAa,iCAAOR,KAAKC,MAAMjB,EAAGkB,KAAKT,KAA1B,eACb,iDAAmB,iCAAOO,KAAKC,MAAMjB,EAAGyB,WAAWhB,KAAhC,eAEnB,6CAAe,iCAAOT,EAAG0B,OAAV,UACf,2CAAa,iCAAQ1B,EAAG2B,SAAX,UACb,uCAAS,iCAAQ3B,EAAG4B,WAAX,SAAT,WApCO3B,e,GAhDL4B,aCFbC,E,4JACjB,WACI,IAAQnC,EAASC,KAAKC,MAAdF,KACR,OACI,qBAAKG,UAAU,iBAAf,SACI,sBAAKA,UAAU,iBAAf,UACI,iDACA,wCAAWH,EAAKoC,SAAhB,OACA,qBAAKnB,IAAKjB,EAAKmB,KAAMC,IAAI,KACzB,yDAA2B,iCAAQC,KAAKC,MAAMtB,EAAK8B,YAAxB,YAA3B,OACA,uCAAS,+BAAQ9B,EAAKqC,OAAtB,OACA,6CAAe,iCAAQrC,EAAKsC,WAAb,OAAf,OACA,2CAAa,+BAAQtC,EAAKuC,WAA1B,OACA,uCAAS,iCAAQvC,EAAKwC,KAAb,SAAT,gB,GAbiBN,aCI/BO,EAAU,mCAEKC,E,4MACjBC,MAAQ,CACJP,SAAU,GACVC,KAAM,GACNP,WAAY,GACZQ,WAAY,GACZC,SAAU,GACVC,KAAM,GACNrB,KAAM,GAENyB,IAAK,KAELC,KAAM,M,EA+BVC,W,sBAAa,0CAAAC,EAAA,sEAELC,MAAM,uDAAD,OAAwD,EAAKL,MAAMC,IAAIK,SAAvE,gBAAuF,EAAKN,MAAMC,IAAIM,UAAtG,0DAAiKT,IAFjK,cACHU,EADG,gBAGmBA,EAASC,OAH5B,cAGKC,EAHL,OAIFF,EAASG,IACR,EAAKC,SAAS,CACVnB,SAAUiB,EAAMG,OANnB,SAWLR,MAAM,uDAAD,OAAwD,EAAKL,MAAMC,IAAIK,SAAvE,gBAAuF,EAAKN,MAAMC,IAAIM,UAAtG,0DAAiKT,IAXjK,cAUHgB,EAVG,iBAYkBA,EAAQL,OAZ1B,QAYKP,EAZL,OAaKa,EAAUb,EAAKa,QAE1BD,EAAQH,KAELnC,EAFS,2CAEkCuC,EAAQxC,QAAQ,GAAGC,KAFrD,YAIXkB,EAAO,IAAI7B,MACVmD,QAAmB,IAAXD,EAAQjD,IACjBkD,EAAUtB,EAAKuB,WAAa,IAAMvB,EAAKwB,aAEzC,EAAKN,SAAS,CACZlB,KAAMsB,EACN7B,WAAY4B,EAAQ5B,WACpBQ,WAAYoB,EAAQ3B,OACpBQ,SAAUmB,EAAQ1B,SAClBQ,KAAMkB,EAAQzB,WACdd,KAAMA,EAEN0B,KAAMA,EAAKiB,SA/BN,4C,uDANb,WAAqB,IAAD,OAChBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAAAC,GAAI,OAAI,EAAKZ,SAAS,CAAEX,IAAKuB,EAAKC,c,oBAyCxC,WACI,OACI,sBAAKjE,UAAU,YAAf,UACI,qBAAKA,UAAU,iBAAf,SACI,wBACIA,UAAU,mBACVkE,QAASpE,KAAK6C,WAFlB,2BAKF7C,KAAK0C,MAAMxB,KAAO,cAAC,EAAD,CAChBnB,KAAMC,KAAK0C,QAAY,KAEzB1C,KAAK0C,MAAMxB,KAAO,cAAC,EAAD,CAChBnB,KAAMC,KAAK0C,MAAME,OAAU,Y,GA7FVX,aCKtBoC,MAXf,WACE,OACE,sBAAKnE,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,mBAAGa,KAAK,IAAIb,UAAU,aAAtB,SAAmC,iDAErC,cAAC,EAAD,QCHNoE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8e7f4600.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\n\r\nexport default class Days extends Component {\r\n\r\n    render() {\r\n        const { Data } = this.props\r\n        return (\r\n            <div className=\"days-wrapper\">\r\n            \r\n            <Tabs>\r\n                <TabList>\r\n                    { Data && Data.map( (el, i) => {\r\n                        const dateMo = new Date(el.dt * 1000).toLocaleDateString();\r\n                        const date = new Date(el.dt * 1000);\r\n                        const weekDay = new Array(7);\r\n                            weekDay[0] = \"Sunday\";\r\n                            weekDay[1] = \"Monday\";\r\n                            weekDay[2] = \"Tuesday\";\r\n                            weekDay[3] = \"Wednesday\";\r\n                            weekDay[4] = \"Thursday\";\r\n                            weekDay[5] = \"Friday\";\r\n                            weekDay[6] = \"Saturday\";\r\n                        const day = weekDay[date.getDay()];\r\n                        return(\r\n                            <Tab key={i}>\r\n                                <a href=\"#weath\" >\r\n                                    <h3>{day}</h3>\r\n                                    <p>{dateMo}</p>\r\n                                    <img src={`http://openweathermap.org/img/wn/${el.weather[0].icon}@2x.png`} alt=\"\" />\r\n                                    <p>max <span>{Math.round(el.temp.max)}℃</span></p>\r\n                                    <p>min <span>{Math.round(el.temp.min)}℃</span></p>\r\n                                </a>\r\n                            </Tab>\r\n                        )\r\n                    }) }\r\n                </TabList>\r\n\r\n                { Data && Data.map( (el, i) => {\r\n                    const dateMo = new Date(el.dt * 1000).toLocaleDateString();\r\n                    const date = new Date(el.dt * 1000);\r\n                    const weekDay = new Array(7);\r\n                        weekDay[0] = \"Sunday\";\r\n                        weekDay[1] = \"Monday\";\r\n                        weekDay[2] = \"Tuesday\";\r\n                        weekDay[3] = \"Wednesday\";\r\n                        weekDay[4] = \"Thursday\";\r\n                        weekDay[5] = \"Friday\";\r\n                        weekDay[6] = \"Saturday\";\r\n                    const day = weekDay[date.getDay()];\r\n                    return(\r\n                        <TabPanel key={i}>\r\n                            <Tab id=\"weath\">\r\n                                <div>\r\n                                    <h3> {day}</h3>\r\n                                    <p>{dateMo}</p>\r\n                                    <img src={`http://openweathermap.org/img/wn/${el.weather[0].icon}@2x.png`} alt=\"\" />\r\n                                </div>\r\n                                <table>\r\n                                    <tbody>\r\n                                    <tr>\r\n                                        <td></td>\r\n                                        <td>morning</td>\r\n                                        <td>evening</td>\r\n                                        <td>night</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>temp: </td>\r\n                                        \r\n                                        <td><span> {Math.round(el.temp.morn)}℃</span>   </td>\r\n                                        <td><span> {Math.round(el.temp.eve)}℃</span></td>\r\n                                        <td><span> {Math.round(el.temp.night)}℃</span></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>feels like:</td>\r\n                                        <td><span>{Math.round(el.feels_like.morn)}℃</span></td>\r\n                                        <td><span>{Math.round(el.feels_like.eve)}℃</span></td>\r\n                                        <td><span>{Math.round(el.feels_like.night)}℃</span></td>\r\n                                    </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                                \r\n                                <p>temp day: <span>{Math.round(el.temp.day)}℃</span></p>\r\n                                <p>temp day feels: <span>{Math.round(el.feels_like.day)}℃</span></p>\r\n\r\n                                <p>Cloudiness: <span>{el.clouds}%</span></p>\r\n                                <p>Humidity: <span>{ el.humidity } </span></p>\r\n                                <p>Wind: <span>{ el.wind_speed }m/s</span> </p>\r\n\r\n                            </Tab>\r\n                        </TabPanel>\r\n                    )\r\n                }) }\r\n                \r\n            </Tabs>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Current extends Component {\r\n    render() {\r\n        const { Data } = this.props\r\n        return (\r\n            <div className=\"curent-wrapper\">\r\n                <div className=\"curent-weather\">\r\n                    <h3>Current weather</h3>\r\n                    <span> In {Data.location} </span>\r\n                    <img src={Data.icon} alt=\"\" />\r\n                    <p>Temperature feels like: <span>{ Math.round(Data.feels_like) }℃</span> </p>\r\n                    <p>Time: <span>{ Data.time }</span> </p>\r\n                    <p>Cloudiness: <span>{ Data.Cloudiness }%</span> </p>\r\n                    <p>Humidity: <span>{ Data.Humidity }</span> </p>\r\n                    <p>Wind: <span>{ Data.Wind }m/s</span> </p>\r\n                </div>\r\n            </div> \r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport Days from './days';\r\nimport Current from './current';\r\n\r\n\r\nconst API_KEY = '773411df19335a4ee21f3d753a23e6c2';\r\n\r\nexport default class Weather extends Component {\r\n    state = {\r\n        location: '',\r\n        time: '',\r\n        feels_like: '', \r\n        Cloudiness: '',\r\n        Humidity: '',\r\n        Wind: '',\r\n        icon: '',\r\n\r\n        cor: null,\r\n        \r\n        data: null\r\n    }\r\n    \r\n    // async componentDidMount() {\r\n    //     navigator.geolocation.getCurrentPosition(success);\r\n            \r\n    //         function success(pos) {\r\n    //             var crd = pos.coords;\r\n    //             console.log(crd);\r\n    //         };\r\n        \r\n    //     const response = await fetch('https://ipapi.co/json/')\r\n    //     const data = await response.json();\r\n    //     console.log(data);\r\n    //     // this.setState({\r\n    //     //     location: data,\r\n    //     //     center: {\r\n    //     //         lat: data.latitude,\r\n    //     //         lng: data.longitude\r\n    //     //     }\r\n    //     // })\r\n\r\n    // }\r\n\r\n\r\n    componentDidMount() {\r\n        window.navigator.geolocation.getCurrentPosition(\r\n          area => this.setState({ cor: area.coords })\r\n        );\r\n    }\r\n    \r\n    getWeather = async () => {\r\n        const api_city = await\r\n            fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${this.state.cor.latitude}&lon=${this.state.cor.longitude}&units=metric&cnt=7?exclude=hourly,daily&appid=${API_KEY}`)\r\n                const datas = await api_city.json();\r\n            if(api_city.ok) {\r\n                this.setState({\r\n                    location: datas.name,\r\n                })\r\n            }\r\n        \r\n        const api_url = await\r\n            fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${this.state.cor.latitude}&lon=${this.state.cor.longitude}&units=metric&cnt=7?exclude=hourly,daily&appid=${API_KEY}`)\r\n                const data = await api_url.json();\r\n                const current = data.current\r\n\r\n        if(api_url.ok) {\r\n        // icon weather\r\n          let icon = `http://openweathermap.org/img/wn/${current.weather[0].icon}@2x.png`\r\n        // time \r\n        let time = new Date();\r\n        time.setTime(current.dt*1000);\r\n        let setTime = time.getHours() + \":\" + time.getMinutes();\r\n\r\n          this.setState({\r\n            time: setTime, \r\n            feels_like: current.feels_like, \r\n            Cloudiness: current.clouds,\r\n            Humidity: current.humidity,\r\n            Wind: current.wind_speed,\r\n            icon: icon,\r\n\r\n            data: data.daily\r\n          });\r\n        }\r\n    \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"button-wrapper\">\r\n                    <button \r\n                        className=\"button-get-weath\"\r\n                        onClick={this.getWeather}>Get weather</button>\r\n                </div>\r\n\r\n                { this.state.icon ? <Current \r\n                    Data={this.state}/>  : null }\r\n\r\n                { this.state.icon ? <Days \r\n                    Data={this.state.data}/> : null }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import Weather from './components/weather'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <a href=\"/\" className=\"site-title\"><h1 >Weather app</h1></a>\n      </header>\n      <Weather/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}